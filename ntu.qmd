---
title: "NTU"
format: html
editor: visual
---

## NUS Page -\> NTU

Quarto enables you to weave together content and executable code into a finished document. To learn more about Quarto see <https://quarto.org>.

## Running Code

When you click the **Render** button a document will be generated that includes both content and the output of embedded code. You can embed code like this:

```{r}
# Load libraries
library(shiny)
library(shinydashboard)
library(plotly)
library(scales)
library(tidyverse)

# Define UI
ui <- fluidPage(
  titlePanel("Data Story"),
  tabsetPanel(
    tabPanel("Number of Passengers by Country", plotlyOutput(outputId = "barPlot1")),
    tabPanel("Number of Passengers by Year", 
             plotlyOutput(outputId = "barPlot2"),
            plotlyOutput(outputId = "generalGrowthRatePlot")),
    tabPanel("Contribution by Country Each Year", plotlyOutput(outputId = "stackedBarPlot")),
    tabPanel("Heatmap of Passengers", plotOutput(outputId = "heatmap")),
    tabPanel("Explore by Country", 
             uiOutput("selectCountry"), 
             plotlyOutput(outputId = "barPlot3"),
             plotlyOutput(outputId = "growthRatePlot"),
             plotlyOutput(outputId = "predictedGrowthPlot"))
  )
)

# Define server logic
server <- function(input, output, session) { 

  ##Cleaning, tidying and filtering original dataset 
  ### Mapping for country names
  country_mapping <- c(
    AT = "Austria", BE = "Belgium", BG = "Bulgaria", CY = "Cyprus",
    CZ = "Czech Republic", DE = "Germany", DK = "Denmark", EE = "Estonia",
    EL = "Greece", ES = "Spain", FI = "Finland", FR = "France",
    HR = "Croatia", HU = "Hungary", IE = "Ireland", IT = "Italy",
    LT = "Lithuania", LU = "Luxembourg", LV = "Latvia", MT = "Malta",
    NL = "Netherlands", PL = "Poland", PT = "Portugal", RO = "Romania",
    SE = "Sweden", SI = "Slovenia", SK = "Slovakia"
  )
  
  ### Reading data, selecting variables and filtering out unwanted countries
  data <- read.csv("EU27_passenger_data.csv")
  filtered_data <- data %>%
    select(TIME_PERIOD, OBS_VALUE, geo) %>%
    filter(!geo %in% c("BA", "CH", "EU27_2020", "IS", "ME", "MK", "NO", "RS", "UK"))
  
  ### Map geo to country names
  filtered_data <- filtered_data %>%
    mutate(Country = recode(geo, !!!country_mapping))
  
  ### Present data in wide format 
  final_data <- filtered_data %>%
    pivot_wider(
      names_from = TIME_PERIOD,
      values_from = OBS_VALUE,
      id_cols = Country
    )
  
  ## Prepare dataset for barPlot1
  data_country_total <- final_data %>%
    rowwise() %>%
    mutate(Total = sum(c_across(`2011`:`2022`), na.rm = TRUE)) %>%
    ungroup() %>%
    select(Country, Total)
  
  ## Prepare dataset for barPlot2 
  data_year_total <- final_data %>%
    summarise(across(`2011`:`2022`, ~sum(.x, na.rm = TRUE))) %>%
    pivot_longer(cols = `2011`:`2022`, names_to = "Year", values_to = "TotalPassengers")
  
  ## Prepare dataset for general growth rates 
  general_growth_rate_data <- final_data %>%
    pivot_longer(cols = starts_with("20"), names_to = "Year", values_to = "Value") %>%
    mutate(Year = as.numeric(str_remove(Year, "X"))) %>%
    arrange(Year) %>%
    group_by(Year) %>%
    summarize(Value = mean(Value, na.rm = TRUE)) %>%
    mutate(GrowthRate = (Value/lag(Value) - 1) * 100) %>%
    filter(!is.na(GrowthRate)) %>%
    ungroup()
  
  ## Prepare dataset for stackedBarPlot 
  stacked_data <- final_data %>%
    pivot_longer(cols = -Country, names_to = "Year", values_to = "Passengers") %>%
    group_by(Year, Country) %>%
    mutate(Contribution = Passengers) %>%
    ungroup()
  
  ### Arrange countries by most to least contribution for stackedBarPlot
  stacked_data <- stacked_data %>% 
    arrange(Year, desc(Contribution))
  
  ### Reorder Country factor based on arranged data for stacking
  stacked_data <- stacked_data %>%
    mutate(Country = factor(Country, levels = unique(Country)))
  
  ## Prepare dataset for heatmap
  data_melted <- final_data %>%
    pivot_longer(cols = -Country, names_to = "Year", values_to = "Value")
  
  ### Arrange countries alphabetically for heatmap
  data_melted$Country <- factor(data_melted$Country, levels = rev(sort(unique(data_melted$Country))))
  
  ## Define utility functions for growth rate by country and predicted growth rate 
  ### Calculate growth rate by country
  growth_rate <- function(data) {
    data %>%
      pivot_longer(cols = starts_with("20"), names_to = "Year", values_to = "Value") %>%
      mutate(Year = as.numeric(str_remove(Year, "X"))) %>%
      arrange(Year) %>%
      group_by(Country) %>%
      mutate(GrowthRate = (Value/lag(Value) - 1) * 100) %>%
      filter(!is.na(GrowthRate)) %>% 
      ungroup()
  }
  
  #### Reactive expression for selected country growth rates 
  selected_country_growth_rate <- reactive({
    req(input$selectedCountry)
    growth_rate_data <- final_data %>%
      filter(Country == input$selectedCountry)
    growth_rate(growth_rate_data)
  })
  
  ### Calculate predicted growth rate
  predict_growth_rate <- function(data) {
    
    #### Fit a linear regression model 
    model <- lm(Value ~ Year, data = data) 
    
    #### Create new data frame for prediction years 2023-2027
    new_data <- data.frame(Year = 2023:2027)  
    
    #### Predict the values for these years
    prediction <- predict(model, new_data)
    new_data$PredictedValue = prediction
    
    #### Calculate growth rate for these predictions
    last_known_value <- tail(data$Value, 1)
    new_data <- new_data %>% 
      mutate(GrowthRate = if_else(row_number() == 1, 
                                  (PredictedValue/last_known_value - 1) * 100, 
                                  (PredictedValue/lag(PredictedValue) - 1) * 100)) %>% 
      filter(!is.na(GrowthRate))
    
    return(new_data)
  }
  
  ### Reactive expression for selected countries' predicted growth rates 
  predicted_growth_rates <- reactive({
    req(input$selectedCountry)
    country_data <- final_data %>%
      filter(Country == input$selectedCountry) %>%
      pivot_longer(cols = `2020`:`2022`, names_to = "Year", values_to = "Value") %>%
      mutate(Year = as.numeric(Year)) %>%
      arrange(Year)
    predict_growth_rate(country_data)  
  })
  
  ## Render the bar plot for total number of passengers by country across the years
  output$barPlot1 <- renderPlotly({
    p <- ggplot(data_country_total, aes(x = Country, y = Total, text = paste("Country: ", Country, "<br>Passengers: ", scales::comma(Total)))) +
      geom_bar(stat = "identity", fill = "grey", color = "white") +
      labs(x = "Country", y = "Number of Passengers", title = "Total Number of Passengers per Country Across All Years") +
      theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
      scale_y_log10(labels = scales::comma) 
    ggplotly(p, tooltip = "text")
  })
  
  ## Render the bar plot for total number of passengers each year 
  output$barPlot2 <- renderPlotly({
    p <- ggplot(data_year_total, aes(x = as.factor(Year), y = TotalPassengers, text = paste("Year: ", Year, "<br>Passengers: ", scales::comma(TotalPassengers)))) +
      geom_bar(stat = "identity", fill = "grey", color = "white") +
      labs(x = "Year", y = "Number of Passengers", title = "Total Number of Passengers by Year") +
      theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
      scale_y_continuous(labels = scales::comma)
    ggplotly(p, tooltip = "text")
  })
  
  ## Render the general growth rate plot 
  output$generalGrowthRatePlot <- renderPlotly({
    req(general_growth_rate_data)
    p <- ggplot(general_growth_rate_data, aes(x = Year, y = GrowthRate, group = 1, text = paste("Year: ", Year, "<br>Growth Rate: ", round(GrowthRate, 2), "%"))) +
      geom_line() +
      geom_point() +
      labs(x = "Year", y = "Year-on-Year Growth Rate (%)", title = "Year-on-Year Growth Rate") +
      scale_x_continuous(breaks = 2011:2022) + 
      theme_minimal()
    ggplotly(p, tooltip = "text")
  })
  
  ## Render the stacked bar plot for contributions of each country each year 
  output$stackedBarPlot <- renderPlotly({
    p <- ggplot(stacked_data, aes(x = as.factor(Year), y = Passengers, fill = Country,
                                  text = paste("Country: ", Country, 
                                               "<br>Year: ", Year, 
                                               "<br>Passengers: ", scales::comma(Passengers)))) +
      geom_bar(stat = "identity", position = "stack") +
      labs(x = "Year", y = "Total Number of Passengers", title = "Contribution by Country Each Year") +
      theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
      scale_y_continuous(labels = scales::comma)
      guides(fill = guide_legend(reverse = TRUE))
    ggplotly(p, tooltip = "text")
  })
  
  ## Render the heatmap for a visualisation of total number of passengers by country each year
  output$heatmap <- renderPlot({
    ggplot(data_melted, aes(x = as.factor(Year), y = Country, fill = Value)) + 
      geom_tile() + 
      scale_fill_gradient(low = "white", high = "red", labels = scales::comma) +
      theme_minimal() +
      labs(title = "Heatmap", x = "Year", y = "Country")
  })
  
  ## Ensure the selectInput is updated after the data is prepared
  output$selectCountry <- renderUI({
    sorted_countries <- sort(unique(final_data$Country))
    selectInput("selectedCountry", "Select a Country:", choices = sorted_countries)
  })
  
  ## Render the line graph for total number of passengers for the selected country 
  output$barPlot3 <- renderPlotly({
    req(input$selectedCountry)  
    
    ### Pivot data from wide to long
    country_data <- final_data %>%
      filter(Country == input$selectedCountry) %>%
      pivot_longer(
        cols = -Country, 
        names_to = "Year",
        values_to = "Value"
      ) %>%
      mutate(
        Year = as.numeric(Year), # Convert Year to numeric
        Value = as.numeric(Value) # Ensure Value is numeric
      ) %>%
      arrange(Year)
    p <- ggplot(country_data, aes(x = as.numeric(Year), y = Value, group = 1, text = paste("Year: ", Year, "<br>Passengers: ", scales::comma(Value)))) +
      geom_line() +
      geom_point() +
      labs(x = "Year", y = "Number of Passengers", title = paste("Number of Passengers over the Years -", input$selectedCountry)) +
      scale_x_continuous(breaks = 2011:2022) +
      scale_y_log10(labels = scales::comma) +
      theme_minimal()
    ggplotly(p, tooltip = "text")
  })
  
  ## Render the growth rate plot for the selected country
  output$growthRatePlot <- renderPlotly({
    req(selected_country_growth_rate())
    growth_data <- selected_country_growth_rate()
    year_range <- range(growth_data$Year)
    p <- ggplot(growth_data, aes(x = Year, y = GrowthRate, group = 1, text = paste("Year: ", Year, "<br>Growth Rate: ", round(GrowthRate, 2), "%"))) +
      geom_line() +
      geom_point() +
      labs(x = "Year", y = "Year-on-Year Growth Rate (%)", title = paste("Year-on-Year Growth Rate for", input$selectedCountry)) +
      scale_x_continuous(breaks = 2011:2022) + 
      theme_minimal()
    ggplotly(p, tooltip = "text")
})
  
  ## Render the prediction growth rate plot for the selected country
  output$predictedGrowthPlot <- renderPlotly({
    req(predicted_growth_rates())
    predicted_data <- predicted_growth_rates()
    p <- ggplot(predicted_data, aes(x = Year, y = GrowthRate, group = 1, text = paste("Year: ", Year, "<br>Predicted Growth Rate: ", round(GrowthRate, 2), "%"))) +
      geom_line() +
      geom_point() +
      labs(x = "Year", y = "Predicted Growth Rate (%)", title = paste("Predicted Growth Rate for", input$selectedCountry, "for 2023-2027")) +
      theme_minimal()
    ggplotly(p, tooltip = "text")
  })
  
}

# Create Shiny app
shinyApp(ui = ui, server = server)

```

You can add options to executable code like this

```{r}
#| echo: false
2 * 2
```

The `echo: false` option disables the printing of code (only output is displayed).
