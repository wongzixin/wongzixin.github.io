{
  "hash": "4a4f5f681527e238fe1016ceb027a6f8",
  "result": {
    "markdown": "---\ntitle: \"Challenge-4\"\nauthor: \"Wong Zi Xin\"\ndate: \"2023-11-06\"\noutput:\n  pdf_document: default\n  html_document: default\n---\n\n\n\n\n<style>\np.comment {\nbackground-color: #DBDBDB;\npadding: 10px;\nborder: 1px solid black;\nmargin-left: 25px;\nborder-radius: 5px;\nfont-style: italic;\n}\n\n</style>\n\n## Questions\n<br>\n\nLoad the \"CommQuest2023.csv\" dataset using the `read_csv()` command and assign it to a variable named \"comm_data.\" \n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Enter code here\nlibrary(tidyverse)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.2     ✔ readr     2.1.4\n✔ forcats   1.0.0     ✔ stringr   1.5.0\n✔ ggplot2   3.4.4     ✔ tibble    3.2.1\n✔ lubridate 1.9.2     ✔ tidyr     1.3.0\n✔ purrr     1.0.2     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (<http://conflicted.r-lib.org/>) to force all conflicts to become errors\n```\n:::\n\n```{.r .cell-code}\ncomm_data <- read.csv(\"CommQuest2023_Larger.csv\")\n```\n:::\n\n<br>\n\n\n#### Question-1: Communication Chronicles\n\nUsing the select command, create a new dataframe containing only the \"date,\" \"channel,\" and \"message\" columns from the \"comm_data\" dataset.\n\n**Solution:**\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Enter code here\nselect(comm_data,date,channel,message)\n```\n:::\n\n<br>\n\n#### Question-2: Channel Selection\n\nUse the filter command to create a new dataframe that includes messages sent through the \"Twitter\" channel on August 2nd.\n\n**Solution:**\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Enter code here\ncomm_data %>% filter(date == \"2023-08-02\",channel == \"Twitter\") %>% select(date,channel,message)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n         date channel         message\n1  2023-08-02 Twitter    Team meeting\n2  2023-08-02 Twitter  Exciting news!\n3  2023-08-02 Twitter  Exciting news!\n4  2023-08-02 Twitter  Exciting news!\n5  2023-08-02 Twitter  Exciting news!\n6  2023-08-02 Twitter    Team meeting\n7  2023-08-02 Twitter     Great work!\n8  2023-08-02 Twitter Hello everyone!\n9  2023-08-02 Twitter Hello everyone!\n10 2023-08-02 Twitter Need assistance\n11 2023-08-02 Twitter Need assistance\n12 2023-08-02 Twitter Need assistance\n13 2023-08-02 Twitter  Exciting news!\n14 2023-08-02 Twitter Need assistance\n15 2023-08-02 Twitter Need assistance\n```\n:::\n:::\n\n<br>\n\n#### Question-3: Chronological Order\n\nUtilizing the arrange command, arrange the \"comm_data\" dataframe in ascending order based on the \"date\" column.\n\n**Solution:**\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Enter code here\ncomm_data %>% arrange(comm_data, date)\n```\n:::\n\n<br>\n\n#### Question-4: Distinct Discovery\n\nApply the distinct command to find the unique senders in the \"comm_data\" dataframe.\n\n**Solution:**\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Enter code here\ncomm_data %>% distinct(sender)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n         sender\n1  dave@example\n2   @bob_tweets\n3   @frank_chat\n4  @erin_tweets\n5 alice@example\n6   carol_slack\n```\n:::\n:::\n\n<br>\n\n#### Question-5: Sender Stats\n\nEmploy the count and group_by commands to generate a summary table that shows the count of messages sent by each sender in the \"comm_data\" dataframe.\n\n**Solution:**\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Enter code here\ncomm_data %>% \n  group_by(sender) %>%\n  summarise(count=n())\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 6 × 2\n  sender        count\n  <chr>         <int>\n1 @bob_tweets     179\n2 @erin_tweets    171\n3 @frank_chat     174\n4 alice@example   180\n5 carol_slack     141\n6 dave@example    155\n```\n:::\n:::\n\n<br>\n\n#### Question-6: Channel Chatter Insights\n\nUsing the group_by and count commands, create a summary table that displays the count of messages sent through each communication channel in the \"comm_data\" dataframe.\n\n**Solution:**\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Enter code here\ncomm_data %>% \n  group_by(channel) %>%\n  summarise(count=n())\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 3 × 2\n  channel count\n  <chr>   <int>\n1 Email     331\n2 Slack     320\n3 Twitter   349\n```\n:::\n:::\n\n<br>\n\n#### Question-7: Positive Pioneers\n\nUtilize the filter, select, and arrange commands to identify the top three senders with the highest average positive sentiment scores. Display their usernames and corresponding sentiment averages.\n\n**Solution:**\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Enter code here\ncomm_data %>%\n  group_by(sender) %>%\n  summarise(average_positive_sentiment_scores = mean(sentiment)) %>% \n  filter(average_positive_sentiment_scores>0) %>%\n  arrange(desc(average_positive_sentiment_scores)) %>%\n  select(sender,average_positive_sentiment_scores) %>%\n  slice(1:3) \n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 3 × 2\n  sender        average_positive_sentiment_scores\n  <chr>                                     <dbl>\n1 carol_slack                             0.118  \n2 alice@example                           0.0570 \n3 dave@example                            0.00687\n```\n:::\n:::\n\n<br>\n\n#### Question-8: Message Mood Over Time\n\nWith the group_by, summarise, and arrange commands, calculate the average sentiment score for each day in the \"comm_data\" dataframe.\n\n**Solution:**\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Enter code here\ncomm_data %>% \n  group_by(date) %>% \n  arrange(date) %>%\n  summarise(average_sentiment_score = mean(sentiment)) \n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 20 × 2\n   date       average_sentiment_score\n   <chr>                        <dbl>\n 1 2023-08-01                 -0.0616\n 2 2023-08-02                  0.136 \n 3 2023-08-03                  0.107 \n 4 2023-08-04                 -0.0510\n 5 2023-08-05                  0.193 \n 6 2023-08-06                 -0.0144\n 7 2023-08-07                  0.0364\n 8 2023-08-08                  0.0666\n 9 2023-08-09                  0.0997\n10 2023-08-10                 -0.0254\n11 2023-08-11                 -0.0340\n12 2023-08-12                  0.0668\n13 2023-08-13                 -0.0604\n14 2023-08-14                 -0.0692\n15 2023-08-15                  0.0617\n16 2023-08-16                 -0.0220\n17 2023-08-17                 -0.0191\n18 2023-08-18                 -0.0760\n19 2023-08-19                  0.0551\n20 2023-08-20                  0.0608\n```\n:::\n:::\n\n<br>\n\n#### Question-9: Selective Sentiments\n\nUse the filter and select commands to extract messages with a negative sentiment score (less than 0) and create a new dataframe.\n\n**Solution:**\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Enter code here\ncomm_data %>% \n  filter(sentiment < 0) %>% \n  select(date,channel,sender,message,sentiment) \n```\n:::\n\n<br>\n\n#### Question-10: Enhancing Engagement\n\nApply the mutate command to add a new column to the \"comm_data\" dataframe, representing a sentiment label: \"Positive,\" \"Neutral,\" or \"Negative,\" based on the sentiment score.\n\n**Solution:**\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Enter code here\ncomm_data %>%\n  mutate(sentiment_label = case_when(\n    sentiment > 0 ~ \"Positive\",\n    sentiment == 0 ~ \"Neutral\",\n    sentiment < 0 ~ \"Negative\"))\n```\n:::\n\n<br>\n\n#### Question-11: Message Impact\n\nCreate a new dataframe using the mutate and arrange commands that calculates the product of the sentiment score and the length of each message. Arrange the results in descending order.\n\n**Solution:**\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Enter code here\ncomm_data %>%\n  mutate(sentiment_product = sentiment * nchar(message)) %>%\n  arrange(desc(sentiment_product))\n```\n:::\n\n<br>\n\n#### Question-12: Daily Message Challenge\n\nUse the group_by, summarise, and arrange commands to find the day with the highest total number of characters sent across all messages in the \"comm_data\" dataframe.\n\n**Solution:**\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Enter code here\ncomm_data %>%\n  group_by(date) %>%\n  summarise(total_characters = sum(nchar(message))) %>%\n  arrange(desc(total_characters)) %>%\n    slice(1) \n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 1 × 2\n  date       total_characters\n  <chr>                 <int>\n1 2023-08-10              875\n```\n:::\n:::\n\n<br>\n\n#### Question-13: Untidy data\n\nCan you list at least two reasons why the dataset illustrated in slide 10 is non-tidy? How can it be made Tidy?\n\n**Solution:** Firstly, variables are not organised properly and each observation does not form a row. For example, \"Unemployed\", \"Unemployment Rate\" and \"Employed\" all exist as rows instead of columns in the table. Secondly, there are blanks in the rows, which makes the table harder to read and comprehend. \nReasons why the dataset is non-tidy: Age classification is included as sub-headings in the data-set, so is the employment under each age category. Instead, we could have had age and employment as two separate columns or variables. That would make the data-set conform to Tidy data structure.\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}