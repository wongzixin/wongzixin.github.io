{
  "hash": "410e4160a39ac403de0a4f4d674e87d8",
  "result": {
    "markdown": "---\npdf_document: default\nauthor: \"Wong Zi Xin\"\ndate: \"2023-11-06\"\noutput:\n  html_document: null\n  df_print: paged\n  pdf_document: default\ntitle: \"Week-4: Code-along\"\n---\n\n  \n\n\n# II. Code to edit and execute using the Code-along.Rmd file \n<br>\n\n## A. Data Wrangling\n<br>\n\n### 1. Loading packages (Slide #16)\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Load package tidyverse\nlibrary(tidyverse)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.2     ✔ readr     2.1.4\n✔ forcats   1.0.0     ✔ stringr   1.5.0\n✔ ggplot2   3.4.4     ✔ tibble    3.2.1\n✔ lubridate 1.9.2     ✔ tidyr     1.3.0\n✔ purrr     1.0.2     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (<http://conflicted.r-lib.org/>) to force all conflicts to become errors\n```\n:::\n:::\n\n\n### 2. Loading data-set (Slide #16)\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Read data from the hotels.csv file and assign it to a variable named, \"hotels\"\nhotels <- read.csv(\"hotels.csv\")\n```\n:::\n\n\n### 3. List names of the variables in the data-set (Slide #19)\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Enter code here\nnames(hotels)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n [1] \"hotel\"                          \"is_canceled\"                   \n [3] \"lead_time\"                      \"arrival_date_year\"             \n [5] \"arrival_date_month\"             \"arrival_date_week_number\"      \n [7] \"arrival_date_day_of_month\"      \"stays_in_weekend_nights\"       \n [9] \"stays_in_week_nights\"           \"adults\"                        \n[11] \"children\"                       \"babies\"                        \n[13] \"meal\"                           \"country\"                       \n[15] \"market_segment\"                 \"distribution_channel\"          \n[17] \"is_repeated_guest\"              \"previous_cancellations\"        \n[19] \"previous_bookings_not_canceled\" \"reserved_room_type\"            \n[21] \"assigned_room_type\"             \"booking_changes\"               \n[23] \"deposit_type\"                   \"agent\"                         \n[25] \"company\"                        \"days_in_waiting_list\"          \n[27] \"customer_type\"                  \"adr\"                           \n[29] \"required_car_parking_spaces\"    \"total_of_special_requests\"     \n[31] \"reservation_status\"             \"reservation_status_date\"       \n```\n:::\n:::\n\n\n\n### 4. Glimpse of contents of the data-set (Slide #20)\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Enter code here\nglimpse(hotels)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nRows: 119,390\nColumns: 32\n$ hotel                          <chr> \"Resort Hotel\", \"Resort Hotel\", \"Resort…\n$ is_canceled                    <int> 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 0, 0, …\n$ lead_time                      <int> 342, 737, 7, 13, 14, 14, 0, 9, 85, 75, …\n$ arrival_date_year              <int> 2015, 2015, 2015, 2015, 2015, 2015, 201…\n$ arrival_date_month             <chr> \"July\", \"July\", \"July\", \"July\", \"July\",…\n$ arrival_date_week_number       <int> 27, 27, 27, 27, 27, 27, 27, 27, 27, 27,…\n$ arrival_date_day_of_month      <int> 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, …\n$ stays_in_weekend_nights        <int> 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, …\n$ stays_in_week_nights           <int> 0, 0, 1, 1, 2, 2, 2, 2, 3, 3, 4, 4, 4, …\n$ adults                         <int> 2, 2, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, …\n$ children                       <int> 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, …\n$ babies                         <int> 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, …\n$ meal                           <chr> \"BB\", \"BB\", \"BB\", \"BB\", \"BB\", \"BB\", \"BB…\n$ country                        <chr> \"PRT\", \"PRT\", \"GBR\", \"GBR\", \"GBR\", \"GBR…\n$ market_segment                 <chr> \"Direct\", \"Direct\", \"Direct\", \"Corporat…\n$ distribution_channel           <chr> \"Direct\", \"Direct\", \"Direct\", \"Corporat…\n$ is_repeated_guest              <int> 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, …\n$ previous_cancellations         <int> 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, …\n$ previous_bookings_not_canceled <int> 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, …\n$ reserved_room_type             <chr> \"C\", \"C\", \"A\", \"A\", \"A\", \"A\", \"C\", \"C\",…\n$ assigned_room_type             <chr> \"C\", \"C\", \"C\", \"A\", \"A\", \"A\", \"C\", \"C\",…\n$ booking_changes                <int> 3, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, …\n$ deposit_type                   <chr> \"No Deposit\", \"No Deposit\", \"No Deposit…\n$ agent                          <chr> \"NULL\", \"NULL\", \"NULL\", \"304\", \"240\", \"…\n$ company                        <chr> \"NULL\", \"NULL\", \"NULL\", \"NULL\", \"NULL\",…\n$ days_in_waiting_list           <int> 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, …\n$ customer_type                  <chr> \"Transient\", \"Transient\", \"Transient\", …\n$ adr                            <dbl> 0.00, 0.00, 75.00, 75.00, 98.00, 98.00,…\n$ required_car_parking_spaces    <int> 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, …\n$ total_of_special_requests      <int> 0, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 3, …\n$ reservation_status             <chr> \"Check-Out\", \"Check-Out\", \"Check-Out\", …\n$ reservation_status_date        <chr> \"2015-07-01\", \"2015-07-01\", \"2015-07-02…\n```\n:::\n:::\n\n<br>\n\n## B. Choosing rows or columns\n<br>\n\n### 5. Select a single column (Slide #24)\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Enter code here\nselect(hotels,lead_time)\n```\n:::\n\n\n### 6. Select multiple columns (Slide #25)\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Enter code here\nselect(hotels,lead_time,agent,market_segment)\n```\n:::\n\n\n### 7. Arrange entries of a column (Slide #28)\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Enter code here\narrange(hotels,lead_time)\n```\n:::\n\n\n### 8. Arrange entries of a column in the descending order (Slide #30)\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Enter code here\narrange(hotels,desc(lead_time))\n```\n:::\n\n\n### 9. Select columns and arrange the entries of a column (Slide #31)\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Enter code here\narrange(select(hotels,lead_time),desc(lead_time))\n```\n:::\n\n\n### 10. Select columns and arrange the entries of a column using the pipe operator (Slide #37)\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Enter code here\nhotels %>% select(lead_time) %>% arrange(desc(lead_time))\n```\n:::\n\n\n### 11. Pick rows matching a condition (Slide #44)\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Enter code here\nhotels %>% filter(children >= 1) %>% select(hotel,children)\n```\n:::\n\n\n### 12. Pick rows matching multiple conditions (Slide #46)\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Enter code here\nhotels %>% filter(children >= 1,hotel == \"City Hotel\") %>% select(hotel,children)\n```\n:::\n\n\n### 13. Non-conditional selection of rows: sequence of indices (Slide #49)\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Enter code here\nhotels %>% slice(1:5)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n         hotel is_canceled lead_time arrival_date_year arrival_date_month\n1 Resort Hotel           0       342              2015               July\n2 Resort Hotel           0       737              2015               July\n3 Resort Hotel           0         7              2015               July\n4 Resort Hotel           0        13              2015               July\n5 Resort Hotel           0        14              2015               July\n  arrival_date_week_number arrival_date_day_of_month stays_in_weekend_nights\n1                       27                         1                       0\n2                       27                         1                       0\n3                       27                         1                       0\n4                       27                         1                       0\n5                       27                         1                       0\n  stays_in_week_nights adults children babies meal country market_segment\n1                    0      2        0      0   BB     PRT         Direct\n2                    0      2        0      0   BB     PRT         Direct\n3                    1      1        0      0   BB     GBR         Direct\n4                    1      1        0      0   BB     GBR      Corporate\n5                    2      2        0      0   BB     GBR      Online TA\n  distribution_channel is_repeated_guest previous_cancellations\n1               Direct                 0                      0\n2               Direct                 0                      0\n3               Direct                 0                      0\n4            Corporate                 0                      0\n5                TA/TO                 0                      0\n  previous_bookings_not_canceled reserved_room_type assigned_room_type\n1                              0                  C                  C\n2                              0                  C                  C\n3                              0                  A                  C\n4                              0                  A                  A\n5                              0                  A                  A\n  booking_changes deposit_type agent company days_in_waiting_list customer_type\n1               3   No Deposit  NULL    NULL                    0     Transient\n2               4   No Deposit  NULL    NULL                    0     Transient\n3               0   No Deposit  NULL    NULL                    0     Transient\n4               0   No Deposit   304    NULL                    0     Transient\n5               0   No Deposit   240    NULL                    0     Transient\n  adr required_car_parking_spaces total_of_special_requests reservation_status\n1   0                           0                         0          Check-Out\n2   0                           0                         0          Check-Out\n3  75                           0                         0          Check-Out\n4  75                           0                         0          Check-Out\n5  98                           0                         1          Check-Out\n  reservation_status_date\n1              2015-07-01\n2              2015-07-01\n3              2015-07-02\n4              2015-07-02\n5              2015-07-03\n```\n:::\n:::\n\n\n### 14. Non-conditional selection of rows: non-consecutive/specific indices (Slide #50)\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Enter code here\nhotels %>% slice(1,3,5)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n         hotel is_canceled lead_time arrival_date_year arrival_date_month\n1 Resort Hotel           0       342              2015               July\n2 Resort Hotel           0         7              2015               July\n3 Resort Hotel           0        14              2015               July\n  arrival_date_week_number arrival_date_day_of_month stays_in_weekend_nights\n1                       27                         1                       0\n2                       27                         1                       0\n3                       27                         1                       0\n  stays_in_week_nights adults children babies meal country market_segment\n1                    0      2        0      0   BB     PRT         Direct\n2                    1      1        0      0   BB     GBR         Direct\n3                    2      2        0      0   BB     GBR      Online TA\n  distribution_channel is_repeated_guest previous_cancellations\n1               Direct                 0                      0\n2               Direct                 0                      0\n3                TA/TO                 0                      0\n  previous_bookings_not_canceled reserved_room_type assigned_room_type\n1                              0                  C                  C\n2                              0                  A                  C\n3                              0                  A                  A\n  booking_changes deposit_type agent company days_in_waiting_list customer_type\n1               3   No Deposit  NULL    NULL                    0     Transient\n2               0   No Deposit  NULL    NULL                    0     Transient\n3               0   No Deposit   240    NULL                    0     Transient\n  adr required_car_parking_spaces total_of_special_requests reservation_status\n1   0                           0                         0          Check-Out\n2  75                           0                         0          Check-Out\n3  98                           0                         1          Check-Out\n  reservation_status_date\n1              2015-07-01\n2              2015-07-02\n3              2015-07-03\n```\n:::\n:::\n\n\n### 15. Pick unique rows using distinct() (Slide #52)\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Enter code here\nhotels %>% distinct(hotel)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n         hotel\n1 Resort Hotel\n2   City Hotel\n```\n:::\n:::\n\n<br>\n\n## C. Creating new columns\n<br>\n\n### 16. Creating a single column with mutate() (Slide #56)\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Enter code here\nhotels %>% \n  mutate(little_ones = children + babies) %>%\n    select(hotel,little_ones,children,babies)\n```\n:::\n\n\n### 17. Creating multiple columns with mutate() (Slide #58)\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Enter code here\nhotels %>% \n  mutate(little_ones = children + babies,\n         average_little_ones = mean(little_ones)) %>%\n    select(hotel,little_ones,children,babies,average_little_ones)\n```\n:::\n\n<br>\n\n## D. More operations with examples\n<br>\n\n### 18. count() to get frequencies (Slide #60)\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Enter code here\nhotels %>% count(market_segment)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n  market_segment     n\n1       Aviation   237\n2  Complementary   743\n3      Corporate  5295\n4         Direct 12606\n5         Groups 19811\n6  Offline TA/TO 24219\n7      Online TA 56477\n8      Undefined     2\n```\n:::\n:::\n\n\n### 19. count() to get frequencies with sorting of count (Slide #61)\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Enter code here\nhotels %>% count(market_segment, sort=TRUE)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n  market_segment     n\n1      Online TA 56477\n2  Offline TA/TO 24219\n3         Groups 19811\n4         Direct 12606\n5      Corporate  5295\n6  Complementary   743\n7       Aviation   237\n8      Undefined     2\n```\n:::\n:::\n\n\n### 20. count() multiple variables (Slide #62)\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Enter code here\nhotels %>% count(hotel,market_segment)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n          hotel market_segment     n\n1    City Hotel       Aviation   237\n2    City Hotel  Complementary   542\n3    City Hotel      Corporate  2986\n4    City Hotel         Direct  6093\n5    City Hotel         Groups 13975\n6    City Hotel  Offline TA/TO 16747\n7    City Hotel      Online TA 38748\n8    City Hotel      Undefined     2\n9  Resort Hotel  Complementary   201\n10 Resort Hotel      Corporate  2309\n11 Resort Hotel         Direct  6513\n12 Resort Hotel         Groups  5836\n13 Resort Hotel  Offline TA/TO  7472\n14 Resort Hotel      Online TA 17729\n```\n:::\n:::\n\n\n### 21. summarise() for summary statistics (Slide #63)\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Enter code here\nhotels %>% summarise(mean_adr = mean(adr))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n  mean_adr\n1 101.8311\n```\n:::\n:::\n\n\n### 22. summarise() by using group_by to find mean (Slide #64)\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Enter code here\nhotels %>% \n  group_by(hotel) %>%\n  summarise(mean_adr = mean(adr))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 2 × 2\n  hotel        mean_adr\n  <chr>           <dbl>\n1 City Hotel      105. \n2 Resort Hotel     95.0\n```\n:::\n:::\n\n\n### 23. summarise() by using group_by to get count (Slide #65)\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Enter code here\nhotels %>% \n  group_by(hotel) %>%\n  summarise(count=n())\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 2 × 2\n  hotel        count\n  <chr>        <int>\n1 City Hotel   79330\n2 Resort Hotel 40060\n```\n:::\n:::\n\n\n### 24. summarise() for multiple summary statistics (Slide #67)\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Enter code here\nhotels %>%\n  summarise(\n    min_adr = min(adr),\n    mean_adr = mean(adr),\n    median_adr = median(adr),\n    max_adr = max(adr)\n  )\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n  min_adr mean_adr median_adr max_adr\n1   -6.38 101.8311     94.575    5400\n```\n:::\n:::\n\n\n### 25. select(), slice() and arrange() (Slide #68)\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Enter code here\nhotels %>% \n  select(hotel,lead_time) %>%\n  slice(1:5) %>% \n  arrange(lead_time)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n         hotel lead_time\n1 Resort Hotel         7\n2 Resort Hotel        13\n3 Resort Hotel        14\n4 Resort Hotel       342\n5 Resort Hotel       737\n```\n:::\n:::\n\n\n### 26. select(), arrange() and slice() (Slide #69)\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Enter code here\nhotels %>% \n  select(hotel,lead_time) %>%\n  arrange(lead_time) %>%\n  slice(1:5)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n         hotel lead_time\n1 Resort Hotel         0\n2 Resort Hotel         0\n3 Resort Hotel         0\n4 Resort Hotel         0\n5 Resort Hotel         0\n```\n:::\n:::\n\n\n### 27. filter() to select rows based on conditions (Slide #73)\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Enter code here\nhotels %>% filter(hotel == \"City Hotel\")\n```\n:::\n\n\n### 28. filter() to select rows based on complicated conditions (Slide #74)\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Enter code here\nhotels %>%\n  filter(adults == 1,\n         children >= 1 | babies >= 1) %>%\n  select(adults,babies,children)\n```\n:::\n\n\n### 29. count() and arrange() (Slide #76)\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Enter code here\nhotels %>%\n  count(market_segment) %>%\n  arrange(desc(n))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n  market_segment     n\n1      Online TA 56477\n2  Offline TA/TO 24219\n3         Groups 19811\n4         Direct 12606\n5      Corporate  5295\n6  Complementary   743\n7       Aviation   237\n8      Undefined     2\n```\n:::\n:::\n\n\n### 30. mutate(), select() and arrange() (Slide #77)\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Enter code here\nhotels %>% \n  mutate(little_ones = children + babies) %>% \n  select(children, babies, little_ones) %>% \n  arrange(desc(little_ones))\n```\n:::\n\n\n\n### 31. mutate(), filter() and select() (Slide #78)\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Enter code here\nhotels %>%\n  mutate(little_ones = children + babies) %>%\n  filter(\n    little_ones >=1,\n    hotel == \"Resort Hotel\"\n  ) %>% \n  select(hotel, little_ones)\n\nhotels %>%\n  mutate(little_ones = children + babies) %>%\n  filter(\n    little_ones >=1,\n    hotel == \"City Hotel\"\n  ) %>% \n  select(hotel, little_ones)\n```\n:::",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}