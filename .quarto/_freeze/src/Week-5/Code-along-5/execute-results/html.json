{
  "hash": "34f5ce1f44624d41b5d23b4fc0379a04",
  "result": {
    "markdown": "---\npdf_document: default\nauthor: \"Wong Zi Xin\"\ndate: \"2023-11-06\"\noutput:\n  html_document: null\n  df_print: paged\n  pdf_document: default\ntitle: \"Week-5: Code-along\"\n---\n\n  \n\n\n# II. Code to edit and execute using the Code-along.Rmd file \n<br>\n\n## A. Writing a function\n<br>\n\n### 1. Write a function to print a \"Hello\" message (Slide #14)\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Enter code here\nsay_hello_to <- function(name) {\n  print(paste0(\"Hello \", name, \"!\"))\n}\n```\n:::\n\n<br>\n\n### 2. Function call with different input names (Slide #15)\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Enter code here\nsay_hello_to(\"ZiXin\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"Hello ZiXin!\"\n```\n:::\n\n```{.r .cell-code}\nsay_hello_to(\"Prof\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"Hello Prof!\"\n```\n:::\n\n```{.r .cell-code}\nsay_hello_to(\"yingzhe\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"Hello yingzhe!\"\n```\n:::\n:::\n\n<br>\n\n### 3. typeof primitive functions (Slide #16)\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Enter code here\ntypeof(`+`)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"builtin\"\n```\n:::\n\n```{.r .cell-code}\ntypeof(sum)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"builtin\"\n```\n:::\n:::\n\n<br>\n\n### 4. typeof user-defined functions (Slide #17)\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Enter code here\ntypeof(say_hello_to)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"closure\"\n```\n:::\n\n```{.r .cell-code}\ntypeof(mean)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"closure\"\n```\n:::\n:::\n\n<br>\n\n### 5. Function to calculate mean of a sample (Slide #19)\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Enter code here\ncalc_sample_mean <- function(sample_size) {\n  mean(rnorm(sample_size))\n}\n```\n:::\n\n<br>\n\n### 6. Test your function (Slide #22)\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# With one input\ncalc_sample_mean(1000)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] -0.008391743\n```\n:::\n:::\n\n<br>\n\n::: {.cell}\n\n```{.r .cell-code}\n# With vector input\ncalc_sample_mean(c(100, 300, 3000))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 0.02815837\n```\n:::\n:::\n\n<br>\n\n### 7. Customizing the function to suit input (Slide #23)\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Enter code here\nlibrary(tidyverse)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.2     ✔ readr     2.1.4\n✔ forcats   1.0.0     ✔ stringr   1.5.0\n✔ ggplot2   3.4.4     ✔ tibble    3.2.1\n✔ lubridate 1.9.2     ✔ tidyr     1.3.0\n✔ purrr     1.0.2     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (<http://conflicted.r-lib.org/>) to force all conflicts to become errors\n```\n:::\n\n```{.r .cell-code}\nsample_tibble <- tibble(sample_sizes = \n                          c(100,300,3000))\nsample_tibble %>% \n  group_by(sample_sizes) %>%\n  mutate(sample_means = \n           calc_sample_mean(sample_sizes))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 3 × 2\n# Groups:   sample_sizes [3]\n  sample_sizes sample_means\n         <dbl>        <dbl>\n1          100      -0.0411\n2          300       0.0364\n3         3000       0.0279\n```\n:::\n:::\n\n<br>\n\n### 8. Setting defaults (Slide #25)\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# First define the function\ncalc_sample_mean <- function(sample_size,our_mean=0,our_sd=1) {\n  \n  sample <- rnorm(sample_size,\n                  mean = our_mean,\n                  sd = our_sd)\n  \n  mean(sample)\n}\n# Call the function \ncalc_sample_mean(sample_size=10)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] -0.5092087\n```\n:::\n:::\n\n<br>\n\n### 9. Different input combinations (Slide #26)\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Enter code here \ncalc_sample_mean(10, our_sd=2)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 0.2779054\n```\n:::\n\n```{.r .cell-code}\ncalc_sample_mean(10, our_mean=6)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 6.004923\n```\n:::\n\n```{.r .cell-code}\ncalc_sample_mean(10,6,2)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 5.194746\n```\n:::\n:::\n\n<br>\n\n### 10. Different input combinations (Slide #27)\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# set error=TRUE to see the error message in the output\n# Enter code here \ncalc_sample_mean(our_mean=5)\n```\n\n::: {.cell-output .cell-output-error}\n```\nError in calc_sample_mean(our_mean = 5): argument \"sample_size\" is missing, with no default\n```\n:::\n:::\n\n<br>\n\n### 11. Some more examples (Slide #28)\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Enter code here \nadd_two <- function(x) {\n  x+2\n}\n\nadd_two(4)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 6\n```\n:::\n\n```{.r .cell-code}\nadd_two(-34)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] -32\n```\n:::\n\n```{.r .cell-code}\nadd_two(5.784)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 7.784\n```\n:::\n\n```{.r .cell-code}\nadd_two <- function(x) {\n  y+2\n}\nadd_two(4)\n```\n\n::: {.cell-output .cell-output-error}\n```\nError in add_two(4): object 'y' not found\n```\n:::\n:::\n\n<br>\n\n## B. Scoping\n<br>\n\n### 12. Multiple assignment of z (Slide #36)\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Enter code here\nz <- 1 \nsprintf(\"The value assigned to z outside the function is %d\", z)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"The value assigned to z outside the function is 1\"\n```\n:::\n\n```{.r .cell-code}\nadd_three_to_z <- function(z=2) {\n  z <- 3\n  return(z+3)\n}\nadd_three_to_z()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 6\n```\n:::\n:::\n\n<br>\n\n### 13. Multiple assignment of z (Slide #37)\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Enter code here\nz <- 1 \n\nadd_three_to_z <- function(z=2) {\n  z <- 3\n  return(z+3)\n}\nadd_three_to_z(z=4)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 6\n```\n:::\n:::\n\n<br>",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}